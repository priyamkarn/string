string longestDiverseString(int a, int b, int c) {
        int freq[3];
        freq[0]=a;
        freq[1]=b;
        freq[2]=c;
        int maxlimit=2;
        priority_queue<pair<int,int>>pq;
        for(int i=0;i<3;i++)
        {
            if(freq[i]!=0)
            {
            pq.push(make_pair(freq[i],i));
            }
        }
        string ans="";
        while(!pq.empty())
        {
            int freq1=pq.top().first;
            int chr1=pq.top().second;
            pq.pop();
            if(ans.size()==0 || ans.back()!=(char)(chr1+'a'))
            {
                int times=min(freq1,maxlimit);
                for(int j=0;j<times;j++)
                {
                    ans+=(char)(chr1+'a');
                }
                freq1-=times;
                if(freq1)
                {
                    pq.push(make_pair(freq1,chr1));
                }
            }
            else
            {
                if(pq.size()==0)
                {
                    break;
                }
                int chr2=pq.top().second;
                int freq2=pq.top().first;
                pq.pop();
                ans+=(char)(chr2+'a');
                freq2--;
                if(freq2)
                {
                    pq.push(make_pair(freq2,chr2));
                }
                pq.push(make_pair(freq1,chr1));
            }
        }
        return ans;
    }
