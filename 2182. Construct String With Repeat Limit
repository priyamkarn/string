class Solution {
public:
    string repeatLimitedString(string s, int repeatLimit) {
        priority_queue<pair<int,int>>pq;
        int freq[26]={0};
        for(auto it:s)
        {
            freq[it-'a']++;
        }
        for(int i=0;i<26;i++)
        {
            if(freq[i]>0)
            {
            pq.push(make_pair(i,freq[i]));
            }
        }
        string res="";
        while(!pq.empty())
        {
            int chr1=pq.top().first;
            int freq1=pq.top().second;
            pq.pop();
            if(res.size()==0 || res.back()!=(char)(chr1+'a'))
            {
             int times=min(freq1,repeatLimit);
             for(int j=0;j<times;j++)
             {
                 res=res+(char)(chr1+'a');
             }
             freq1=freq1-times;
             if(freq1)
             {
                 pq.push(make_pair(chr1,freq1));
             }   
            }
            else
            {
                if(pq.size()==0)
                {
                    break;
                }
                int chr2=pq.top().first;
                int freq2=pq.top().second;
                pq.pop();
                res=res+(char)(chr2+'a');
                freq2--;
                if(freq2)
                {
                    pq.push(make_pair(chr2,freq2));
                }
                pq.push(make_pair(chr1,freq1));
            }
        }
        return res;
    }
};
